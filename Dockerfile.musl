# REFERENCES
# * https://discourse.llvm.org/t/using-clang-with-musl/66719
#
FROM ubuntu:xenial-20210416
# FROM ubuntu:noble-20240429
ARG DEBIAN_FRONTEND=noninteractive
ENV LANG C.UTF-8
ENV LC_ALL C.UTF-8

# musl-dev \
RUN apt-get update \
 && apt-get install -y --no-install-recommends \
        apt-transport-https \
        build-essential \
        ca-certificates \
        curl \
        g++ \
        gcc \
        git \
        libboost-all-dev \
        libbz2-dev \
        libffi-dev  \
        liblzma-dev \
        libncursesw5-dev \
        libreadline-dev \
        libsqlite3-dev  \
        libssl-dev \
        libxml2-dev \
        libxmlsec1-dev \
        tk-dev \
        vim \
        wget \
        xz-utils \
        zlib1g-dev \
 && apt-get clean \
 && rm -rf /var/lib/apt/lists/*

ARG PYENV_VERSION="2.4.1"
RUN git clone https://github.com/pyenv/pyenv.git \
 && cd pyenv \
 && git checkout "v${PYENV_VERSION}" \
 && cd plugins/python-build \
 && ./install.sh

ARG PYTHON_VERSION="3.9.19"
RUN python-build "${PYTHON_VERSION}" /usr/local

ARG CMAKE_REPO_URL=https://github.com/Kitware/CMake
ARG CMAKE_VERSION="3.29.3"
RUN git clone "${CMAKE_REPO_URL}" /tmp/cmake \
 && cd /tmp/cmake \
 && git checkout "v${CMAKE_VERSION}" \
 && ./bootstrap \
 && make -j8 \
 && make install \
 && rm -rf /tmp/cmake

# manually install PPA (ubuntu-toolchain-r/test): http://ppa.launchpad.net/ubuntu-toolchain-r/test/ubuntu
RUN apt-get update \
 && apt-get install -y \
     lsb-release \
 && echo "deb http://ppa.launchpad.net/ubuntu-toolchain-r/test/ubuntu $(lsb_release -cs) main" > /etc/apt/sources.list.d/ubuntu-toolchain-r-test.list \
 && apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 60C317803A41BA51845E371A1E9377A2BA9EF27F \
 && apt-get update \
 && apt-get install -y \
      gcc-8 \
      g++-8 \
 && update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 800 --slave /usr/bin/g++ g++ /usr/bin/g++-8

ENV NINJA_VERSION="1.12.1"
RUN apt-get remove -y ninja-build \
 && cd /tmp \
 && git clone https://github.com/ninja-build/ninja \
 && cd ninja \
 && git checkout "v${NINJA_VERSION}" \
 && ./configure.py --bootstrap \
 && ./ninja all \
 && cp ./ninja /usr/local/bin \
 && rm -rf /tmp/ninja

ARG MUSL_REPO_URL=https://github.com/bminor/musl
ARG MUSL_VERSION="1.2.5"
RUN git clone "${MUSL_REPO_URL}" /tmp/musl \
 && cd /tmp/musl \
 && git checkout "v${MUSL_VERSION}" \
 && ./configure \
 && make -j8 \
 && make install \
 && rm -rf /tmp/musl

ARG LLVM_DIR=/opt/llvm
ARG LLVM_VERSION="11.1.0"
RUN git clone https://github.com/llvm/llvm-project.git /tmp/llvm \
 && cd /tmp/llvm \
 && git checkout "llvmorg-${LLVM_VERSION}" \
 && mkdir build

RUN apt-get update \
 && apt-get install -y \
      autoconf \
      libtool \
 && apt-get clean \
 && rm -rf /var/lib/apt/lists/*

# x86_64-pc-linux-musl

# build libcxx with musl?
# -DLLVM_ENABLE_RUNTIMES="libcxx;libcxxabi;libunwind" \
RUN cd /tmp/llvm/build \
  && cmake \
     -S runtimes \
     -B build \
     -DCMAKE_BUILD_WITH_INSTALL_RPATH=TRUE \
     -DCMAKE_INSTALL_PREFIX="${LLVM_DIR}" \
     -DLIBCXX_HAS_MUSL_LIBC=ON \
     -DLLVM_ENABLE_RUNTIMES="libcxx;libcxxabi" \
     -DLLVM_TARGETS_TO_BUILD="X86;AArch64;ARM" \
     -DCMAKE_BUILD_TYPE=Release \
     -DLLVM_ENABLE_ASSERTIONS=true \
     -DLLVM_ENABLE_RTTI=true \
     -DLLVM_PARALLEL_LINK_JOBS=1 \
     -DCMAKE_C_COMPILER=/usr/local/musl/bin/musl-gcc \
     -DCMAKE_SYSROOT=/usr/local/musl \
     -DCMAKE_C_FLAGS="--sysroot=/usr/local/musl" \
     -DCMAKE_CXX_FLAGS="--sysroot=/usr/local/musl" \
     -DCMAKE_EXE_LINKER_FLAGS="--sysroot=/usr/local/musl" \
     -G Ninja \
     ../llvm \
  && ninja -C build cxx cxxabi unwind

# # FIXME do I need to build this with musl?
# ARG LIBUNWIND_REPO_URL=https://github.com/libunwind/libunwind
# ARG LIBUNWIND_VERSION="1.8.1"
# RUN git clone "${LIBUNWIND_REPO_URL}" /tmp/libunwind \
#  && cd /tmp/libunwind \
#  && git checkout "v${LIBUNWIND_VERSION}" \
#  && autoreconf -i \
#  && mkdir build \
#  && cd build \
#  && ../configure \
#  && make install -j8
#
# RUN cd /tmp/llvm \
#  && cd build \
#  && cmake \
#     -DCMAKE_BUILD_WITH_INSTALL_RPATH=TRUE \
#     -DCMAKE_INSTALL_PREFIX="${LLVM_DIR}" \
#     -DLLVM_ENABLE_PROJECTS="lld;clang;clang-tools-extra" \
#     -DLLVM_ENABLE_RUNTIMES="compiler-rt;libcxx;libcxxabi;libunwind" \
#     -DLLVM_TARGETS_TO_BUILD="X86;AArch64;ARM" \
#     -DCMAKE_BUILD_TYPE=Release \
#     -DLLVM_ENABLE_ASSERTIONS=true \
#     -DLLVM_ENABLE_RTTI=true \
#     -DLLVM_PARALLEL_LINK_JOBS=1 \
#     -DCMAKE_C_COMPILER=/usr/local/musl/bin/musl-gcc \
#     -DSCUDO_UNWINDER_LIBRARY_PATH="/usr/local/lib/libunwind.so" \
#     # -DCMAKE_SYSROOT=/usr/local/musl \
#     # -DCMAKE_C_FLAGS="--sysroot=/usr/local/musl" \
#     # -DCMAKE_CXX_FLAGS="--sysroot=/usr/local/musl" \
#     # -DCMAKE_EXE_LINKER_FLAGS="--sysroot=/usr/local/musl" \
#     -G Ninja \
#     ../llvm \
#  && ninja \
#  && ninja install \
#  && rm -rf /tmp/llvm
# ENV PATH "${LLVM_DIR}/bin:${PATH}"
